@page "/backlog"
@using System.Text.Encodings.Web;
@using Microsoft.AspNetCore.WebUtilities;
@inject IJSRuntime JSRuntime;
@inject IssueService IssueService;
@inject NavigationManager NavigationManager;
@inject ReviewService ReviewService;
@attribute [Authorize]

@if (_issues == null)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="form-group">
        <input class="form-control" type="text" placeholder="Filter" value="@_filter" @oninput="Search">
    </div>
    <div class="gh-issue-header">
        <div class="row">
            <div class="col align-self-center">
                @if (_checkedIssues.Count == 0)
                {
                    <p class="text-muted m-0">
                        @{
                            var numberOfOrgs = _issues.Select(i => i.Owner).Distinct().Count();
                            var numberOfRepos = _issues.Select(i => i.Repo).Distinct().Count();
                            var visibleIssues = _issues.Count(IsVisible);
                        }

                        @if (visibleIssues == _issues.Count)
                        {
                            <text>
                                @_issues.Count issues across @numberOfOrgs orgs and @numberOfRepos repos
                            </text>
                        }
                        else
                        {
                            <text>
                                @visibleIssues of @_issues.Count issues across @numberOfOrgs orgs and @numberOfRepos repos
                            </text>
                        }
                    </p>
                }
                else
                {
                    <div class="dropdown">
                        <button class="btn btn-secondary btn-sm dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            @_checkedIssues.Count items selected...
                        </button>
                        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                            <a class="dropdown-item" href="#" @onclick:preventDefault @onclick="() => CopySelectedItems()">Copy links</a>
                        </div>
                    </div>
                }
            </div>
            <div class="col">
                <div class="float-right">
                    <button class="btn btn-secondary btn-sm" @onclick="RefreshAsync">Refresh</button>
                </div>
                @if (_milestones != null)
                {
                    <div class="mr-2 float-right">
                        <div class="dropdown">
                            <button class="btn btn-light btn-sm dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                Milestones
                            </button>
                            <ol class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                @foreach (var (k, v) in _milestones)
                                {
                                    <li class="m-2 checkbox">
                                        <label><input class="mr-2 " type="checkbox" checked="@v" @onchange="_ => MilestoneChecked(k)">@k</label>
                                    </li>
                                }
                            </ol>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="gh-issue-list">

        @foreach (var issue in _issues)
        {
            if (!IsVisible(issue))
                continue;

            var review = FindReview(issue);
            var background = review != null
                                ? "gh-issue-scheduled"
                                : issue.IsBlocking
                                    ? "gh-issue-blocking"
                                    : "";

            <div class="gh-issue-cell @background">
                <div class="row no-gutters align-items-center">
                    <div class="col-auto">
                        <input class="ml-2 mr-3" type="checkbox" checked="@_checkedIssues.Contains(issue)" @onchange="e => CheckIssue(issue, (bool)e.Value)" />
                    </div>
                    <div class="col">
                        <a class="gh-issue-title" href="@issue.Url">@issue.Title</a>
                        <span>
                            @foreach (var label in issue.Labels)
                            {
                                <span class="gh-label"
                                      style="background: @("#" + label.BackgroundColor); color: @label.ForegroundColor">@label.Name</span>
                                }
                        </span>
                        <div class="gh-details-cell">
                            @issue.DetailText

                            @if (issue.Milestone != null)
                            {
                                <span class="ml-2 mr-1 oi oi-signpost text-muted" aria-hidden="true"></span>@issue.Milestone
                            }
                        </div>
                    </div>
                    <div class="col-auto text-muted">
                        @if (review != null)
                        {
                            <span class="oi oi-calendar" aria-hidden="true"></span>
                            <a class="text-muted small" href="reviews/@review.Id">@review.Date.FormatRelative()</a>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {

    private IReadOnlyList<ApiReviewIssue> _issues;
    private string _filter;
    private SortedDictionary<string, bool> _milestones;
    private HashSet<ApiReviewIssue> _checkedIssues = new HashSet<ApiReviewIssue>();
    private ILookup<string, Review> _reviewsByIssue;

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("q", out var q))
            _filter = q.ToString();
        await RefreshAsync();
    }

    private async Task RefreshAsync()
    {
        if (_issues != null)
            await IssueService.RefreshAsync();
        _issues = await IssueService.GetAsync();
        _milestones = CreateMilestones(_issues, _milestones);
        var reviews = await ReviewService.GetAsync();
        _reviewsByIssue = reviews.Where(r => !r.IsCompleted)
                                 .SelectMany(r => r.ScheduledIssues, (r, i) => (r, i))
                                 .ToLookup(t => t.i.IdFull, t => t.r);

        var comparison = Comparer<ApiReviewIssue>.Create((x, y) =>
        {
            if (x == y)
                return 0;

            var reviewX = FindReview(x);
            var reviewY = FindReview(y);

            var review = -(reviewX != null).CompareTo((reviewY != null));
            if (review != 0)
                return review;

            if (reviewX != null && reviewY != null)
            {
                var reviewDate = reviewX.Date.CompareTo(reviewY.Date);
                if (reviewDate != 0)
                    return reviewDate;
            }

            var blocking = -x.IsBlocking.CompareTo(y.IsBlocking);
            if (blocking != 0)
                return blocking;

            return x.CreatedAt.CompareTo(y.CreatedAt);
        });


        var issueList = _issues.ToList();
        issueList.Sort(comparison);
        _issues = issueList.ToArray();
    }

    private Review FindReview(ApiReviewIssue issue)
    {
        if (_reviewsByIssue == null)
            return null;

        return _reviewsByIssue[issue.IdFull].OrderBy(r => r.Date).FirstOrDefault();
    }

    private void Search(ChangeEventArgs e)
    {
        if (e.Value is string filter)
        {
            _filter = filter.Trim();
            var url = $"/backlog";
            if (!string.IsNullOrEmpty(_filter))
                url += $"?q={UrlEncoder.Default.Encode(_filter)}";
            NavigationManager.NavigateTo(url);
        }
    }

    private bool IsVisible(ApiReviewIssue issue)
    {
        if (_milestones != null && _milestones.TryGetValue(issue.Milestone, out var isChecked) && !isChecked)
            return false;

        if (string.IsNullOrEmpty(_filter))
            return true;

        if (issue.Title.Contains(_filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (issue.IdFull.Contains(_filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (issue.Author.Contains(_filter, StringComparison.OrdinalIgnoreCase))
            return true;

        foreach (var label in issue.Labels)
        {
            if (label.Name.Contains(_filter, StringComparison.OrdinalIgnoreCase))
                return true;
        }

        return false;
    }

    private SortedDictionary<string, bool> CreateMilestones(IReadOnlyList<ApiReviewIssue> issues,
                                                            SortedDictionary<string, bool> existingMilestones)
    {
        var result = new SortedDictionary<string, bool>();

        foreach (var issue in issues)
            result[issue.Milestone] = true;

        if (existingMilestones != null)
        {
            foreach (var (k, v) in existingMilestones)
            {
                if (result.ContainsKey(k))
                    result[k] = v;
            }
        }

        return result;
    }

    private void MilestoneChecked(string milestone)
    {
        if (_milestones.TryGetValue(milestone, out var isChecked))
            _milestones[milestone] = !isChecked;
    }

    private async Task CopySelectedItems()
    {
        var text = GetMarkdown();
        if (text == null)
            return;

        var html = Markdig.Markdown.ToHtml(text);
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", text, html);
        _checkedIssues.Clear();
    }

    private string GetMarkdown()
    {
        if (_issues == null)
            return null;

        var sb = new System.Text.StringBuilder();

        foreach (var issue in _issues.Where(_checkedIssues.Contains))
            sb.AppendLine($"* [{issue.IdFull}]({issue.Url}): {issue.Title}");

        return sb.ToString();
    }

    private void CheckIssue(ApiReviewIssue issue, bool value)
    {
        if (value)
            _checkedIssues.Add(issue);
        else
            _checkedIssues.Remove(issue);
    }
}
